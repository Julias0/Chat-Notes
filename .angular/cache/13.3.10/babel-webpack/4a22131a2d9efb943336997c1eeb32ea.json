{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport PocketBase from \"pocketbase\";\nimport { BehaviorSubject, from } from \"rxjs\";\nimport { environment } from \"src/environments/environment\";\nimport { concatMap, map, reduce, switchMap, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nconst pb = new PocketBase(environment.API_URL);\nexport let PocketBaseService = /*#__PURE__*/(() => {\n  class PocketBaseService {\n    constructor() {\n      if (pb.authStore.model) {\n        this.authStateChanged$ = new BehaviorSubject(pb.authStore.model);\n      } else {\n        this.authStateChanged$ = new BehaviorSubject(null);\n      }\n    }\n\n    signUp(email, password) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const data = {\n          email,\n          emailVisibility: true,\n          password,\n          passwordConfirm: password\n        };\n        const record = yield pb.collection(\"users\").create(data);\n        this.authStateChanged$.next(pb.authStore.model);\n        return record;\n      });\n    }\n\n    signIn(email, password) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const authData = yield pb.collection(\"users\").authWithPassword(email, password);\n        this.authStateChanged$.next(pb.authStore.model);\n        return pb.authStore.isValid;\n      });\n    }\n\n    signOut() {\n      pb.authStore.clear();\n      this.authStateChanged$.next(null);\n    }\n\n    getAllMessagesInCloud() {\n      return pb.collection(\"note\").getFullList(200\n      /* batch size */\n      , {\n        sort: \"-created\"\n      });\n    }\n\n    deleteMessage(id) {\n      return pb.collection(\"note\").delete(id);\n    }\n\n    syncMessages(messages) {\n      const existingMessageDeletion$ = from(this.getAllMessagesInCloud()).pipe(tap(existingMessages => console.log('loaded messages from cloud', existingMessages)), switchMap(existingMessages => from(existingMessages)), concatMap(existingMessage => this.deleteMessage(existingMessage.id)), reduce((acc, curr) => acc.concat(curr), []), tap(_ => console.log('deleted messages in cloud')));\n      return existingMessageDeletion$.pipe(tap(_ => console.log('starting upload of expenses')), switchMap(() => from(messages)), concatMap(message => {\n        const data = {\n          main_message: message.main_message,\n          favourite: message.favourite,\n          soft_deleted: message.soft_deleted,\n          message_owner: pb.authStore.model.id,\n          created_time: message.created_at\n        };\n        return from(pb.collection(\"note\").create(data));\n      }), reduce((acc, curr) => acc.concat(curr), []), tap(_ => console.log('deleted messages in cloud')));\n    }\n\n    restoreMessages() {\n      return from(this.getAllMessagesInCloud()).pipe(map(messages => messages.map(message => ({\n        id: message.id,\n        created_at: new Date(message.created_time),\n        favourite: message.favourite,\n        soft_deleted: message.soft_deleted,\n        main_message: message.main_message\n      }))));\n    }\n\n  }\n\n  PocketBaseService.ɵfac = function PocketBaseService_Factory(t) {\n    return new (t || PocketBaseService)();\n  };\n\n  PocketBaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PocketBaseService,\n    factory: PocketBaseService.ɵfac,\n    providedIn: \"root\"\n  });\n  return PocketBaseService;\n})();","map":null,"metadata":{},"sourceType":"module"}
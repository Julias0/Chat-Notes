{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./storage.service\";\nexport let MessagesService = /*#__PURE__*/(() => {\n  class MessagesService {\n    constructor(storageService) {\n      this.storageService = storageService;\n      this.messages = new BehaviorSubject([]);\n      this.ephemeralMessages = new BehaviorSubject(null);\n      this.setCurrentMessage = new Subject();\n      const that = this;\n      that.storageService.get('my_messages').then(messages => {\n        if (messages) {\n          that.messages.next(messages.map(message => Object.assign(Object.assign({}, message), {\n            created_at: new Date(message.created_at)\n          })));\n        }\n      });\n    }\n\n    addEphmeralMessage(messageBody) {\n      const that = this;\n      that.ephemeralMessages.next({\n        id: '1',\n        created_at: new Date(),\n        favourite: false,\n        soft_deleted: false,\n        main_message: messageBody\n      });\n      return that.getMyMessages();\n    }\n\n    getEphemeralMessage() {\n      const that = this;\n      return that.ephemeralMessages.asObservable();\n    }\n\n    getMyMessages() {\n      return this.messages.asObservable();\n    }\n\n    getSetCurrentMessage() {\n      return this.setCurrentMessage.asObservable();\n    }\n\n    addMessage(messageBody) {\n      const that = this;\n      const currentMessages = this.messages.getValue();\n      currentMessages.push({\n        id: (currentMessages.length + 1).toString(),\n        created_at: new Date(),\n        favourite: false,\n        soft_deleted: false,\n        main_message: messageBody\n      });\n      that.ephemeralMessages.next(null);\n      that.storageService.set('my_messages', currentMessages).then(() => {\n        this.messages.next(currentMessages);\n      });\n      return this.getMyMessages();\n    }\n\n    deleteMessage(messageId) {\n      const that = this;\n      const currentMessages = that.messages.getValue();\n      const message = currentMessages.find(currentMessage => currentMessage.id === messageId);\n      message.soft_deleted = true;\n      const modifiedMessages = currentMessages.filter(currentMessage => currentMessage.id !== messageId);\n      modifiedMessages.push(message);\n      that.storageService.set('my_messages', modifiedMessages).then(() => {\n        that.messages.next(modifiedMessages);\n      });\n      return that.getMyMessages();\n    }\n\n    copyMessage(messageId) {\n      const that = this;\n      const currentMessages = that.messages.getValue();\n      const message = currentMessages.find(currentMessage => currentMessage.id === messageId);\n      this.setCurrentMessage.next(message.main_message);\n    }\n\n    restoreMessage(messageId) {\n      const that = this;\n      const currentMessages = that.messages.getValue();\n      const message = currentMessages.find(currentMessage => currentMessage.id === messageId);\n      message.soft_deleted = false;\n      const modifiedMessages = currentMessages.filter(currentMessage => currentMessage.id !== messageId);\n      modifiedMessages.push(message);\n      that.storageService.set('my_messages', modifiedMessages).then(() => {\n        that.messages.next(modifiedMessages);\n      });\n      return that.getMyMessages();\n    }\n\n    favouriteMessage(messageId) {\n      const that = this;\n      const currentMessages = that.messages.getValue();\n      const message = currentMessages.find(currentMessage => currentMessage.id === messageId);\n      message.favourite = !message.favourite;\n      const modifiedMessages = currentMessages.filter(currentMessage => currentMessage.id !== messageId);\n      modifiedMessages.push(message);\n      that.storageService.set('my_messages', modifiedMessages).then(() => {\n        that.messages.next(modifiedMessages);\n      });\n      return that.getMyMessages();\n    }\n\n  }\n\n  MessagesService.ɵfac = function MessagesService_Factory(t) {\n    return new (t || MessagesService)(i0.ɵɵinject(i1.StorageService));\n  };\n\n  MessagesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessagesService,\n    factory: MessagesService.ɵfac,\n    providedIn: 'root'\n  });\n  return MessagesService;\n})();","map":null,"metadata":{},"sourceType":"module"}
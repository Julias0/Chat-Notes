{"ast":null,"code":"import _asyncToGenerator from \"/Users/aiyushdhar/projects/Chat Notes/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-7a8b7a1c.js';\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\nimport { j as findItemLabel, d as getAriaLabel, e as renderHiddenInput } from './helpers-1457892a.js';\nimport { c as popoverController, b as actionSheetController, a as alertController, s as safeCall } from './overlays-a62f858b.js';\nimport { h as hostContext, g as getClassMap } from './theme-ff3fc52f.js';\nimport './hardware-back-button-4a6b37fb.js';\n\nconst watchForOptions = (containerEl, tagName, onChange) => {\n  /* tslint:disable-next-line */\n  if (typeof MutationObserver === 'undefined') {\n    return;\n  }\n\n  const mutation = new MutationObserver(mutationList => {\n    onChange(getSelectedOption(mutationList, tagName));\n  });\n  mutation.observe(containerEl, {\n    childList: true,\n    subtree: true\n  });\n  return mutation;\n};\n\nconst getSelectedOption = (mutationList, tagName) => {\n  let newOption;\n  mutationList.forEach(mut => {\n    // tslint:disable-next-line: prefer-for-of\n    for (let i = 0; i < mut.addedNodes.length; i++) {\n      newOption = findCheckedOption(mut.addedNodes[i], tagName) || newOption;\n    }\n  });\n  return newOption;\n};\n\nconst findCheckedOption = (el, tagName) => {\n  if (el.nodeType !== 1) {\n    return undefined;\n  }\n\n  const options = el.tagName === tagName.toUpperCase() ? [el] : Array.from(el.querySelectorAll(tagName));\n  return options.find(o => o.value === el.value);\n};\n\nconst selectIosCss = \":host{--placeholder-color:currentColor;--placeholder-opacity:0.33;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;font-family:var(--ion-font-family, inherit);overflow:hidden;z-index:2}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}:host(.in-item){position:static;max-width:45%}:host(.select-disabled){opacity:0.4;pointer-events:none}:host(.ion-focused) button{border:2px solid #5e9ed6}.select-placeholder{color:var(--placeholder-color);opacity:var(--placeholder-opacity)}label{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;opacity:0}[dir=rtl] label,:host-context([dir=rtl]) label{left:unset;right:unset;right:0}label::-moz-focus-inner{border:0}button{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}.select-icon{position:relative;opacity:0.33}.select-text{-ms-flex:1;flex:1;min-width:16px;font-size:inherit;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.select-icon-inner{left:5px;top:50%;margin-top:-2px;position:absolute;width:0;height:0;border-top:5px solid;border-right:5px solid transparent;border-left:5px solid transparent;color:currentColor;pointer-events:none}[dir=rtl] .select-icon-inner,:host-context([dir=rtl]) .select-icon-inner{left:unset;right:unset;right:5px}:host{--padding-top:10px;--padding-end:10px;--padding-bottom:10px;--padding-start:20px}.select-icon{width:12px;height:18px}\";\nconst selectMdCss = \":host{--placeholder-color:currentColor;--placeholder-opacity:0.33;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;font-family:var(--ion-font-family, inherit);overflow:hidden;z-index:2}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}:host(.in-item){position:static;max-width:45%}:host(.select-disabled){opacity:0.4;pointer-events:none}:host(.ion-focused) button{border:2px solid #5e9ed6}.select-placeholder{color:var(--placeholder-color);opacity:var(--placeholder-opacity)}label{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;opacity:0}[dir=rtl] label,:host-context([dir=rtl]) label{left:unset;right:unset;right:0}label::-moz-focus-inner{border:0}button{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}.select-icon{position:relative;opacity:0.33}.select-text{-ms-flex:1;flex:1;min-width:16px;font-size:inherit;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.select-icon-inner{left:5px;top:50%;margin-top:-2px;position:absolute;width:0;height:0;border-top:5px solid;border-right:5px solid transparent;border-left:5px solid transparent;color:currentColor;pointer-events:none}[dir=rtl] .select-icon-inner,:host-context([dir=rtl]) .select-icon-inner{left:unset;right:unset;right:5px}:host{--padding-top:10px;--padding-end:0;--padding-bottom:10px;--padding-start:16px}.select-icon{width:19px;height:19px}:host-context(.item-label-floating) .select-icon{-webkit-transform:translate3d(0,  -9px,  0);transform:translate3d(0,  -9px,  0)}\";\nconst Select = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionCancel = createEvent(this, \"ionCancel\", 7);\n    this.ionFocus = createEvent(this, \"ionFocus\", 7);\n    this.ionBlur = createEvent(this, \"ionBlur\", 7);\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    this.inputId = `ion-sel-${selectIds++}`;\n    this.didInit = false;\n    this.isExpanded = false;\n    /**\n     * If `true`, the user cannot interact with the select.\n     */\n\n    this.disabled = false;\n    /**\n     * The text to display on the cancel button.\n     */\n\n    this.cancelText = 'Cancel';\n    /**\n     * The text to display on the ok button.\n     */\n\n    this.okText = 'OK';\n    /**\n     * The name of the control, which is submitted with the form data.\n     */\n\n    this.name = this.inputId;\n    /**\n     * If `true`, the select can accept multiple values.\n     */\n\n    this.multiple = false;\n    /**\n     * The interface the select should use: `action-sheet`, `popover` or `alert`.\n     */\n\n    this.interface = 'alert';\n    /**\n     * Any additional options that the `alert`, `action-sheet` or `popover` interface\n     * can take. See the [ion-alert docs](../alert), the\n     * [ion-action-sheet docs](../action-sheet) and the\n     * [ion-popover docs](../popover) for the\n     * create options for each interface.\n     *\n     * Note: `interfaceOptions` will not override `inputs` or `buttons` with the `alert` interface.\n     */\n\n    this.interfaceOptions = {};\n\n    this.onClick = ev => {\n      this.setFocus();\n      this.open(ev);\n    };\n\n    this.onFocus = () => {\n      this.ionFocus.emit();\n    };\n\n    this.onBlur = () => {\n      this.ionBlur.emit();\n    };\n  }\n\n  disabledChanged() {\n    this.emitStyle();\n  }\n\n  valueChanged() {\n    this.emitStyle();\n\n    if (this.didInit) {\n      this.ionChange.emit({\n        value: this.value\n      });\n    }\n  }\n\n  connectedCallback() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.updateOverlayOptions();\n\n      _this.emitStyle();\n\n      _this.mutationO = watchForOptions(_this.el, 'ion-select-option', /*#__PURE__*/_asyncToGenerator(function* () {\n        _this.updateOverlayOptions();\n      }));\n    })();\n  }\n\n  disconnectedCallback() {\n    if (this.mutationO) {\n      this.mutationO.disconnect();\n      this.mutationO = undefined;\n    }\n  }\n\n  componentDidLoad() {\n    this.didInit = true;\n  }\n  /**\n   * Open the select overlay. The overlay is either an alert, action sheet, or popover,\n   * depending on the `interface` property on the `ion-select`.\n   *\n   * @param event The user interface event that called the open.\n   */\n\n\n  open(event) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.disabled || _this2.isExpanded) {\n        return undefined;\n      }\n\n      const overlay = _this2.overlay = yield _this2.createOverlay(event);\n      _this2.isExpanded = true;\n      overlay.onDidDismiss().then(() => {\n        _this2.overlay = undefined;\n        _this2.isExpanded = false;\n\n        _this2.setFocus();\n      });\n      yield overlay.present();\n      return overlay;\n    })();\n  }\n\n  createOverlay(ev) {\n    let selectInterface = this.interface;\n\n    if ((selectInterface === 'action-sheet' || selectInterface === 'popover') && this.multiple) {\n      console.warn(`Select interface cannot be \"${selectInterface}\" with a multi-value select. Using the \"alert\" interface instead.`);\n      selectInterface = 'alert';\n    }\n\n    if (selectInterface === 'popover' && !ev) {\n      console.warn('Select interface cannot be a \"popover\" without passing an event. Using the \"alert\" interface instead.');\n      selectInterface = 'alert';\n    }\n\n    if (selectInterface === 'popover') {\n      return this.openPopover(ev);\n    }\n\n    if (selectInterface === 'action-sheet') {\n      return this.openActionSheet();\n    }\n\n    return this.openAlert();\n  }\n\n  updateOverlayOptions() {\n    const overlay = this.overlay;\n\n    if (!overlay) {\n      return;\n    }\n\n    const childOpts = this.childOpts;\n    const value = this.value;\n\n    switch (this.interface) {\n      case 'action-sheet':\n        overlay.buttons = this.createActionSheetButtons(childOpts, value);\n        break;\n\n      case 'popover':\n        const popover = overlay.querySelector('ion-select-popover');\n\n        if (popover) {\n          popover.options = this.createPopoverOptions(childOpts, value);\n        }\n\n        break;\n\n      case 'alert':\n        const inputType = this.multiple ? 'checkbox' : 'radio';\n        overlay.inputs = this.createAlertInputs(childOpts, inputType, value);\n        break;\n    }\n  }\n\n  createActionSheetButtons(data, selectValue) {\n    const actionSheetButtons = data.map(option => {\n      const value = getOptionValue(option); // Remove hydrated before copying over classes\n\n      const copyClasses = Array.from(option.classList).filter(cls => cls !== 'hydrated').join(' ');\n      const optClass = `${OPTION_CLASS} ${copyClasses}`;\n      return {\n        role: isOptionSelected(value, selectValue, this.compareWith) ? 'selected' : '',\n        text: option.textContent,\n        cssClass: optClass,\n        handler: () => {\n          this.value = value;\n        }\n      };\n    }); // Add \"cancel\" button\n\n    actionSheetButtons.push({\n      text: this.cancelText,\n      role: 'cancel',\n      handler: () => {\n        this.ionCancel.emit();\n      }\n    });\n    return actionSheetButtons;\n  }\n\n  createAlertInputs(data, inputType, selectValue) {\n    const alertInputs = data.map(option => {\n      const value = getOptionValue(option); // Remove hydrated before copying over classes\n\n      const copyClasses = Array.from(option.classList).filter(cls => cls !== 'hydrated').join(' ');\n      const optClass = `${OPTION_CLASS} ${copyClasses}`;\n      return {\n        type: inputType,\n        cssClass: optClass,\n        label: option.textContent || '',\n        value,\n        checked: isOptionSelected(value, selectValue, this.compareWith),\n        disabled: option.disabled\n      };\n    });\n    return alertInputs;\n  }\n\n  createPopoverOptions(data, selectValue) {\n    const popoverOptions = data.map(option => {\n      const value = getOptionValue(option); // Remove hydrated before copying over classes\n\n      const copyClasses = Array.from(option.classList).filter(cls => cls !== 'hydrated').join(' ');\n      const optClass = `${OPTION_CLASS} ${copyClasses}`;\n      return {\n        text: option.textContent || '',\n        cssClass: optClass,\n        value,\n        checked: isOptionSelected(value, selectValue, this.compareWith),\n        disabled: option.disabled,\n        handler: () => {\n          this.value = value;\n          this.close();\n        }\n      };\n    });\n    return popoverOptions;\n  }\n\n  openPopover(ev) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const interfaceOptions = _this3.interfaceOptions;\n      const mode = getIonMode(_this3);\n      const value = _this3.value;\n      const popoverOpts = Object.assign(Object.assign({\n        mode\n      }, interfaceOptions), {\n        component: 'ion-select-popover',\n        cssClass: ['select-popover', interfaceOptions.cssClass],\n        event: ev,\n        componentProps: {\n          header: interfaceOptions.header,\n          subHeader: interfaceOptions.subHeader,\n          message: interfaceOptions.message,\n          value,\n          options: _this3.createPopoverOptions(_this3.childOpts, value)\n        }\n      });\n      return popoverController.create(popoverOpts);\n    })();\n  }\n\n  openActionSheet() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const mode = getIonMode(_this4);\n      const interfaceOptions = _this4.interfaceOptions;\n      const actionSheetOpts = Object.assign(Object.assign({\n        mode\n      }, interfaceOptions), {\n        buttons: _this4.createActionSheetButtons(_this4.childOpts, _this4.value),\n        cssClass: ['select-action-sheet', interfaceOptions.cssClass]\n      });\n      return actionSheetController.create(actionSheetOpts);\n    })();\n  }\n\n  openAlert() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const label = _this5.getLabel();\n\n      const labelText = label ? label.textContent : null;\n      const interfaceOptions = _this5.interfaceOptions;\n      const inputType = _this5.multiple ? 'checkbox' : 'radio';\n      const mode = getIonMode(_this5);\n      const alertOpts = Object.assign(Object.assign({\n        mode\n      }, interfaceOptions), {\n        header: interfaceOptions.header ? interfaceOptions.header : labelText,\n        inputs: _this5.createAlertInputs(_this5.childOpts, inputType, _this5.value),\n        buttons: [{\n          text: _this5.cancelText,\n          role: 'cancel',\n          handler: () => {\n            _this5.ionCancel.emit();\n          }\n        }, {\n          text: _this5.okText,\n          handler: selectedValues => {\n            _this5.value = selectedValues;\n          }\n        }],\n        cssClass: ['select-alert', interfaceOptions.cssClass, _this5.multiple ? 'multiple-select-alert' : 'single-select-alert']\n      });\n      return alertController.create(alertOpts);\n    })();\n  }\n  /**\n   * Close the select interface.\n   */\n\n\n  close() {\n    // TODO check !this.overlay || !this.isFocus()\n    if (!this.overlay) {\n      return Promise.resolve(false);\n    }\n\n    return this.overlay.dismiss();\n  }\n\n  getLabel() {\n    return findItemLabel(this.el);\n  }\n\n  hasValue() {\n    return this.getText() !== '';\n  }\n\n  get childOpts() {\n    return Array.from(this.el.querySelectorAll('ion-select-option'));\n  }\n\n  getText() {\n    const selectedText = this.selectedText;\n\n    if (selectedText != null && selectedText !== '') {\n      return selectedText;\n    }\n\n    return generateText(this.childOpts, this.value, this.compareWith);\n  }\n\n  setFocus() {\n    if (this.focusEl) {\n      this.focusEl.focus();\n    }\n  }\n\n  emitStyle() {\n    this.ionStyle.emit({\n      'interactive': true,\n      'select': true,\n      'has-placeholder': this.placeholder != null,\n      'has-value': this.hasValue(),\n      'interactive-disabled': this.disabled,\n      'select-disabled': this.disabled\n    });\n  }\n\n  render() {\n    const {\n      disabled,\n      el,\n      inputId,\n      isExpanded,\n      name,\n      placeholder,\n      value\n    } = this;\n    const mode = getIonMode(this);\n    const {\n      labelText,\n      labelId\n    } = getAriaLabel(el, inputId);\n    renderHiddenInput(true, el, name, parseValue(value), disabled);\n    const displayValue = this.getText();\n    let addPlaceholderClass = false;\n    let selectText = displayValue;\n\n    if (selectText === '' && placeholder != null) {\n      selectText = placeholder;\n      addPlaceholderClass = true;\n    }\n\n    const selectTextClasses = {\n      'select-text': true,\n      'select-placeholder': addPlaceholderClass\n    };\n    const textPart = addPlaceholderClass ? 'placeholder' : 'text'; // If there is a label then we need to concatenate it with the\n    // current value (or placeholder) and a comma so it separates\n    // nicely when the screen reader announces it, otherwise just\n    // announce the value / placeholder\n\n    const displayLabel = labelText !== undefined ? selectText !== '' ? `${selectText}, ${labelText}` : labelText : selectText;\n    return h(Host, {\n      onClick: this.onClick,\n      role: \"button\",\n      \"aria-haspopup\": \"listbox\",\n      \"aria-disabled\": disabled ? 'true' : null,\n      \"aria-label\": displayLabel,\n      class: {\n        [mode]: true,\n        'in-item': hostContext('ion-item', el),\n        'select-disabled': disabled,\n        'select-expanded': isExpanded\n      }\n    }, h(\"div\", {\n      \"aria-hidden\": \"true\",\n      class: selectTextClasses,\n      part: textPart\n    }, selectText), h(\"div\", {\n      class: \"select-icon\",\n      role: \"presentation\",\n      part: \"icon\"\n    }, h(\"div\", {\n      class: \"select-icon-inner\"\n    })), h(\"label\", {\n      id: labelId\n    }, displayLabel), h(\"button\", {\n      type: \"button\",\n      disabled: disabled,\n      id: inputId,\n      \"aria-labelledby\": labelId,\n      \"aria-haspopup\": \"listbox\",\n      \"aria-expanded\": `${isExpanded}`,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      ref: focusEl => this.focusEl = focusEl\n    }));\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"disabled\": [\"disabledChanged\"],\n      \"placeholder\": [\"disabledChanged\"],\n      \"value\": [\"valueChanged\"]\n    };\n  }\n\n};\n\nconst isOptionSelected = (currentValue, compareValue, compareWith) => {\n  if (currentValue === undefined) {\n    return false;\n  }\n\n  if (Array.isArray(currentValue)) {\n    return currentValue.some(val => compareOptions(val, compareValue, compareWith));\n  } else {\n    return compareOptions(currentValue, compareValue, compareWith);\n  }\n};\n\nconst getOptionValue = el => {\n  const value = el.value;\n  return value === undefined ? el.textContent || '' : value;\n};\n\nconst parseValue = value => {\n  if (value == null) {\n    return undefined;\n  }\n\n  if (Array.isArray(value)) {\n    return value.join(',');\n  }\n\n  return value.toString();\n};\n\nconst compareOptions = (currentValue, compareValue, compareWith) => {\n  if (typeof compareWith === 'function') {\n    return compareWith(currentValue, compareValue);\n  } else if (typeof compareWith === 'string') {\n    return currentValue[compareWith] === compareValue[compareWith];\n  } else {\n    return Array.isArray(compareValue) ? compareValue.includes(currentValue) : currentValue === compareValue;\n  }\n};\n\nconst generateText = (opts, value, compareWith) => {\n  if (value === undefined) {\n    return '';\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(v => textForValue(opts, v, compareWith)).filter(opt => opt !== null).join(', ');\n  } else {\n    return textForValue(opts, value, compareWith) || '';\n  }\n};\n\nconst textForValue = (opts, value, compareWith) => {\n  const selectOpt = opts.find(opt => {\n    return compareOptions(getOptionValue(opt), value, compareWith);\n  });\n  return selectOpt ? selectOpt.textContent : null;\n};\n\nlet selectIds = 0;\nconst OPTION_CLASS = 'select-interface-option';\nSelect.style = {\n  ios: selectIosCss,\n  md: selectMdCss\n};\nconst selectOptionCss = \":host{display:none}\";\nconst SelectOption = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.inputId = `ion-selopt-${selectOptionIds++}`;\n    /**\n     * If `true`, the user cannot interact with the select option. This property does not apply when `interface=\"action-sheet\"` as `ion-action-sheet` does not allow for disabled buttons.\n     */\n\n    this.disabled = false;\n  }\n\n  render() {\n    return h(Host, {\n      role: \"option\",\n      id: this.inputId,\n      class: getIonMode(this)\n    });\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n};\nlet selectOptionIds = 0;\nSelectOption.style = selectOptionCss;\nconst selectPopoverCss = \".sc-ion-select-popover-h ion-list.sc-ion-select-popover{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}.sc-ion-select-popover-h ion-list-header.sc-ion-select-popover,.sc-ion-select-popover-h ion-label.sc-ion-select-popover{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}\";\nconst SelectPopover = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** Array of options for the popover */\n\n    this.options = [];\n  }\n\n  onSelect(ev) {\n    const option = this.options.find(o => o.value === ev.target.value);\n\n    if (option) {\n      safeCall(option.handler);\n    }\n  }\n\n  render() {\n    const checkedOption = this.options.find(o => o.checked);\n    const checkedValue = checkedOption ? checkedOption.value : undefined;\n    return h(Host, {\n      class: getIonMode(this)\n    }, h(\"ion-list\", null, this.header !== undefined && h(\"ion-list-header\", null, this.header), (this.subHeader !== undefined || this.message !== undefined) && h(\"ion-item\", null, h(\"ion-label\", {\n      class: \"ion-text-wrap\"\n    }, this.subHeader !== undefined && h(\"h3\", null, this.subHeader), this.message !== undefined && h(\"p\", null, this.message))), h(\"ion-radio-group\", {\n      value: checkedValue\n    }, this.options.map(option => h(\"ion-item\", {\n      class: getClassMap(option.cssClass)\n    }, h(\"ion-label\", null, option.text), h(\"ion-radio\", {\n      value: option.value,\n      disabled: option.disabled\n    }))))));\n  }\n\n};\nSelectPopover.style = selectPopoverCss;\nexport { Select as ion_select, SelectOption as ion_select_option, SelectPopover as ion_select_popover };","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Subject, of, BehaviorSubject, merge } from 'rxjs';\nimport { map } from 'rxjs/internal/operators/map';\nimport { delay, startWith, concatMap, distinctUntilChanged, switchMap } from 'rxjs/operators';\nimport { messageListType } from 'src/app/core/enums/messageListTypes.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/services/search.service\";\nimport * as i2 from \"src/app/core/services/messages.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../message/message.component\";\nconst _c0 = [\"messageContainer\"];\n\nfunction MessageContainerComponent_app_message_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-message\", 4);\n  }\n\n  if (rf & 2) {\n    const message_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"message\", message_r3);\n  }\n}\n\nfunction MessageContainerComponent_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"app-message\", 5);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ephemeralMessage_r5 = ctx.ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"isEphemeral\", true)(\"message\", ephemeralMessage_r5);\n  }\n}\n\nexport let MessageContainerComponent = /*#__PURE__*/(() => {\n  class MessageContainerComponent {\n    constructor(searchService, messageService) {\n      this.searchService = searchService;\n      this.messageService = messageService;\n      this.filterElements = messageListType.normal;\n      this.searchText = '';\n      this.searchText$ = new BehaviorSubject('');\n      this.updateDom$ = new Subject();\n    }\n\n    calculateDiff(date1, date2) {\n      date2 = new Date(date2);\n      return Math.floor((Date.UTC(date1.getFullYear(), date1.getMonth(), date1.getDate()) - Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate())) / (1000 * 60 * 60 * 24));\n    }\n\n    scrollToBottom() {\n      try {\n        this.messageContainer.nativeElement.scrollTop = this.messageContainer.nativeElement.scrollHeight + 100;\n      } catch (error) {}\n    }\n\n    ngOnInit() {}\n\n    ngOnChanges() {\n      if (this.searchText$.getValue() !== this.searchText) {\n        this.searchText$.next(this.searchText);\n      }\n    }\n\n    ngAfterViewInit() {\n      const that = this;\n      const searchFiltration$ = that.searchText$.pipe(switchMap(search => that.searchService.searchByText(that.filterElements, search)));\n      that.messages$ = merge(that.searchService.searchByText(that.filterElements, that.searchText), searchFiltration$).pipe(startWith(new Array()), map(messages => messages.sort((a, b) => a.created_at.valueOf() - b.created_at.valueOf())));\n      that.messages$.pipe(concatMap((value, index) => {\n        return of(value).pipe(delay(index < 1 ? 1000 : 200));\n      }), distinctUntilChanged((prev, curr) => curr.length === prev.length)).subscribe(() => {\n        that.scrollToBottom();\n      });\n      that.ephemeralMessage$ = that.messageService.getEphemeralMessage();\n      that.scrollToBottom();\n    }\n\n  }\n\n  MessageContainerComponent.ɵfac = function MessageContainerComponent_Factory(t) {\n    return new (t || MessageContainerComponent)(i0.ɵɵdirectiveInject(i1.SearchService), i0.ɵɵdirectiveInject(i2.MessagesService));\n  };\n\n  MessageContainerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MessageContainerComponent,\n    selectors: [[\"app-message-container\"]],\n    viewQuery: function MessageContainerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.messageContainer = _t.first);\n      }\n    },\n    inputs: {\n      filterElements: \"filterElements\",\n      searchText: \"searchText\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 6,\n    vars: 6,\n    consts: [[1, \"messages-container\"], [\"messageContainer\", \"\"], [3, \"message\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [3, \"message\"], [3, \"isEphemeral\", \"message\"]],\n    template: function MessageContainerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵtemplate(2, MessageContainerComponent_app_message_2_Template, 1, 1, \"app-message\", 2);\n        i0.ɵɵpipe(3, \"async\");\n        i0.ɵɵtemplate(4, MessageContainerComponent_ng_container_4_Template, 2, 2, \"ng-container\", 3);\n        i0.ɵɵpipe(5, \"async\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(3, 2, ctx.messages$));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(5, 4, ctx.ephemeralMessage$));\n      }\n    },\n    directives: [i3.NgForOf, i4.MessageComponent, i3.NgIf],\n    pipes: [i3.AsyncPipe],\n    styles: [\".messages-container[_ngcontent-%COMP%]{overflow:scroll;height:100%}\"]\n  });\n  return MessageContainerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
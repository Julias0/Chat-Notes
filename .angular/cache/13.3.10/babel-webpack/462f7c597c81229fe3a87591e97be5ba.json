{"ast":null,"code":"import { fromEvent, noop, merge } from \"rxjs\";\nimport { map, filter, tap, switchMap } from \"rxjs/operators\";\nimport { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/core/services/messages.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@ionic/angular\";\nconst _c0 = [\"addMessage\"];\nconst _c1 = [\"messageInput\"];\n\nfunction MessageInputComponent_ion_toolbar_0_ion_item_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ion-item\", 8);\n    i0.ɵɵlistener(\"click\", function MessageInputComponent_ion_toolbar_0_ion_item_2_Template_ion_item_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const command_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return ctx_r5.handleAction(command_r4);\n    });\n    i0.ɵɵelementStart(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 9);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const command_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", command_r4.command, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(command_r4.description);\n  }\n}\n\nfunction MessageInputComponent_ion_toolbar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-toolbar\")(1, \"ion-list\");\n    i0.ɵɵtemplate(2, MessageInputComponent_ion_toolbar_0_ion_item_2_Template, 5, 2, \"ion-item\", 7);\n    i0.ɵɵpipe(3, \"slice\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind3(3, 1, ctx_r0.possibleSlashCommands, 0, 2));\n  }\n}\n\nexport let MessageInputComponent = /*#__PURE__*/(() => {\n  class MessageInputComponent {\n    constructor(formBuilder, messagesService) {\n      this.formBuilder = formBuilder;\n      this.messagesService = messagesService;\n      this.slashCommands = [{\n        command: \"/help\",\n        description: \"Show all available commands\",\n        action: () => {\n          this.messagesService.addEphmeralMessage(\"help\");\n        }\n      }, {\n        command: \"/list\",\n        description: \"Show all messages\",\n        action: () => {\n          this.messagesService.addEphmeralMessage(\"list\");\n        }\n      }, {\n        command: \"/backup\",\n        description: \"Backup all messages\",\n        action: () => {\n          this.messagesService.addEphmeralMessage(\"backup\");\n        }\n      }, {\n        command: \"/restore\",\n        description: \"Restore all messages\",\n        action: () => {\n          this.messagesService.addEphmeralMessage(\"restore\");\n        }\n      }, {\n        command: \"/hi\",\n        description: \"Say hi to the bot\",\n        action: () => {\n          this.messagesService.addEphmeralMessage(\"hi\");\n        }\n      }];\n      this.possibleSlashCommands = [];\n    }\n\n    ngOnInit() {\n      this.fg = this.formBuilder.group({\n        currentMessage: [\"\", Validators.required]\n      });\n      this.messagesService.getSetCurrentMessage().subscribe(message => {\n        this.fg.controls.currentMessage.setValue(message);\n        console.log(this.messageInput.el.querySelector('textarea').focus());\n      });\n    }\n\n    handleAction(slashCommand) {\n      slashCommand.action();\n      this.fg.controls.currentMessage.reset();\n    }\n\n    ngAfterViewInit() {\n      const sendButtonClick$ = fromEvent(this.addMessageBtn.el, \"click\");\n      const messageSend$ = merge(sendButtonClick$).pipe(filter(() => this.fg.controls.currentMessage.valid), map(() => this.fg.controls.currentMessage.value), tap(console.log), tap(() => this.fg.controls.currentMessage.reset()), switchMap(message => {\n        return this.messagesService.addMessage(message);\n      })); // enable to start with slash command\n      // this.fg.valueChanges\n      //   .pipe(map((value) => value.currentMessage))\n      //   .subscribe((message: string) => {\n      //     if (message?.startsWith(\"/\")) {\n      //       this.possibleSlashCommands = this.slashCommands.filter(\n      //         (slashCommand) => slashCommand.command.includes(message)\n      //       );\n      //     } else {\n      //       this.possibleSlashCommands = [];\n      //     }\n      //   });\n\n      messageSend$.subscribe(noop);\n    }\n\n  }\n\n  MessageInputComponent.ɵfac = function MessageInputComponent_Factory(t) {\n    return new (t || MessageInputComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.MessagesService));\n  };\n\n  MessageInputComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MessageInputComponent,\n    selectors: [[\"app-message-input\"]],\n    viewQuery: function MessageInputComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addMessageBtn = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.messageInput = _t.first);\n      }\n    },\n    decls: 9,\n    vars: 3,\n    consts: [[4, \"ngIf\"], [1, \"ion-padding\", 3, \"formGroup\"], [\"formControlName\", \"currentMessage\", \"placeholder\", \"Enter message here\", \"rows\", \"1\", \"maxlength\", \"800\", 3, \"autofocus\"], [\"messageInput\", \"\"], [\"slot\", \"end\"], [\"addMessage\", \"\"], [\"slot\", \"icon-only\", \"name\", \"send-outline\"], [\"button\", \"\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [\"button\", \"\", 3, \"click\"], [1, \"command-description\"]],\n    template: function MessageInputComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MessageInputComponent_ion_toolbar_0_Template, 4, 5, \"ion-toolbar\", 0);\n        i0.ɵɵelementStart(1, \"ion-toolbar\")(2, \"form\", 1);\n        i0.ɵɵelement(3, \"ion-textarea\", 2, 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"ion-buttons\", 4)(6, \"ion-button\", null, 5);\n        i0.ɵɵelement(8, \"ion-icon\", 6);\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.possibleSlashCommands.length > 0);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.fg);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"autofocus\", true);\n      }\n    },\n    directives: [i3.NgIf, i4.IonToolbar, i4.IonList, i3.NgForOf, i4.IonItem, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i4.IonTextarea, i4.TextValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.MaxLengthValidator, i4.IonButtons, i4.IonButton, i4.IonIcon],\n    pipes: [i3.SlicePipe],\n    styles: [\".command-description[_ngcontent-%COMP%]{margin-left:4px}\"]\n  });\n  return MessageInputComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}
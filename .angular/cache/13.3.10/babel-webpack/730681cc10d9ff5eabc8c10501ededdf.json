{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { take } from 'rxjs/internal/operators/take';\nimport { Plugins } from '@capacitor/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"src/app/core/services/messages.service\";\nimport * as i3 from \"@angular/common\";\n\nfunction MessageComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"ion-button\", 5);\n    i0.ɵɵlistener(\"click\", function MessageComponent_div_3_Template_ion_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.openActionSheet();\n    });\n    i0.ɵɵelement(2, \"ion-icon\", 6);\n    i0.ɵɵelementEnd()();\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"ephemeral\": a0\n  };\n};\n\nconst {\n  Share\n} = Plugins;\nexport let MessageComponent = /*#__PURE__*/(() => {\n  class MessageComponent {\n    constructor(actionSheetController, messagesService, alertController, toastController) {\n      this.actionSheetController = actionSheetController;\n      this.messagesService = messagesService;\n      this.alertController = alertController;\n      this.toastController = toastController;\n      this.isEphemeral = false;\n    }\n\n    ngOnInit() {}\n\n    presentDeleteAlertConfirm() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const that = this;\n        const alert = yield this.alertController.create({\n          header: 'Delete',\n          message: 'Are you sure you want to delete this message?',\n          buttons: [{\n            text: 'Cancel',\n            role: 'cancel',\n            cssClass: 'secondary'\n          }, {\n            text: 'Okay',\n            handler: () => {\n              that.messagesService.deleteMessage(that.message.id).pipe(take(1)).subscribe(() => {\n                that.toastController.create({\n                  message: 'Message is deleted successfully',\n                  color: 'dark',\n                  position: 'top',\n                  duration: 800\n                }).then(toast => {\n                  toast.present();\n                });\n              });\n            }\n          }]\n        });\n        yield alert.present();\n      });\n    }\n\n    presentRestoreAlertConfirm() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const that = this;\n        const alert = yield this.alertController.create({\n          header: 'Restore',\n          message: 'Are you sure you want to restore this message?',\n          buttons: [{\n            text: 'Cancel',\n            role: 'cancel',\n            cssClass: 'secondary'\n          }, {\n            text: 'Okay',\n            handler: () => {\n              that.messagesService.restoreMessage(that.message.id).pipe(take(1)).subscribe(() => {\n                that.toastController.create({\n                  message: 'Message is restored successfully',\n                  color: 'dark',\n                  position: 'top',\n                  duration: 800\n                }).then(toast => {\n                  toast.present();\n                });\n              });\n            }\n          }]\n        });\n        yield alert.present();\n      });\n    }\n\n    getDeleteAction() {\n      const that = this;\n\n      if (!this.message.soft_deleted) {\n        return {\n          text: 'Delete',\n          role: 'destructive',\n          icon: 'trash',\n          handler: () => __awaiter(this, void 0, void 0, function* () {\n            yield that.presentDeleteAlertConfirm();\n          })\n        };\n      } else {\n        return {\n          text: 'Restore',\n          icon: 'arrow-undo-outline',\n          handler: () => __awaiter(this, void 0, void 0, function* () {\n            yield that.presentRestoreAlertConfirm();\n          })\n        };\n      }\n    }\n\n    getFavouriteAction() {\n      const that = this;\n      return {\n        text: that.message.favourite ? 'Un-favourite' : 'Favourite',\n        icon: 'heart',\n        handler: () => {\n          that.messagesService.favouriteMessage(that.message.id).subscribe(() => {\n            that.toastController.create({\n              message: 'Message is updated successfully',\n              color: 'dark',\n              position: 'top',\n              duration: 800\n            }).then(toast => {\n              toast.present();\n            });\n          });\n        }\n      };\n    }\n\n    getShareAction() {\n      const that = this;\n      return {\n        text: 'Share',\n        icon: 'share-social',\n        handler: () => __awaiter(this, void 0, void 0, function* () {\n          yield Share.share({\n            text: this.message.main_message,\n            dialogTitle: 'Share your note'\n          });\n        })\n      };\n    }\n\n    getCopyAction() {\n      const that = this;\n      return {\n        text: 'Copy',\n        icon: 'copy',\n        handler: () => __awaiter(this, void 0, void 0, function* () {\n          that.messagesService.copyMessage(this.message.id);\n        })\n      };\n    }\n\n    openActionSheet() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const that = this;\n        const buttons = [];\n        buttons.push(that.getCopyAction());\n        buttons.push(that.getShareAction());\n        buttons.push(that.getDeleteAction());\n        buttons.push(that.getFavouriteAction());\n        buttons.push({\n          text: 'Cancel',\n          icon: 'close',\n          role: 'cancel'\n        });\n        const actionSheet = yield this.actionSheetController.create({\n          header: 'What do you want to do to this message?',\n          buttons\n        });\n        yield actionSheet.present();\n      });\n    }\n\n  }\n\n  MessageComponent.ɵfac = function MessageComponent_Factory(t) {\n    return new (t || MessageComponent)(i0.ɵɵdirectiveInject(i1.ActionSheetController), i0.ɵɵdirectiveInject(i2.MessagesService), i0.ɵɵdirectiveInject(i1.AlertController), i0.ɵɵdirectiveInject(i1.ToastController));\n  };\n\n  MessageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MessageComponent,\n    selectors: [[\"app-message\"]],\n    inputs: {\n      message: \"message\",\n      isEphemeral: \"isEphemeral\"\n    },\n    decls: 6,\n    vars: 5,\n    consts: [[3, \"ngClass\"], [\"cardElement\", \"\"], [\"class\", \"message-controls\", 4, \"ngIf\"], [1, \"message-content\"], [1, \"message-controls\"], [\"fill\", \"clear\", \"slot\", \"end\", 3, \"click\"], [\"slot\", \"icon-only\", \"name\", \"ellipsis-horizontal-outline\"]],\n    template: function MessageComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-card\", 0, 1)(2, \"ion-card-content\");\n        i0.ɵɵtemplate(3, MessageComponent_div_3_Template, 3, 0, \"div\", 2);\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c0, ctx.isEphemeral));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isEphemeral);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.message.main_message, \" \");\n      }\n    },\n    directives: [i1.IonCard, i3.NgClass, i1.IonCardContent, i3.NgIf, i1.IonButton, i1.IonIcon],\n    styles: [\".info-box[_ngcontent-%COMP%]{display:flex}.icon-favourite[_ngcontent-%COMP%]{padding-left:4px}.z-0[_ngcontent-%COMP%]{z-index:0}.message-content[_ngcontent-%COMP%]{white-space:pre-line;max-width:90%;font-size:1.5rem}.message-controls[_ngcontent-%COMP%]{right:0;top:0;position:absolute}.ephemeral[_ngcontent-%COMP%]{--background: lightgray;--color: black}\"]\n  });\n  return MessageComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}